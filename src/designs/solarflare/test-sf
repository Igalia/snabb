#!/usr/bin/env snabb

local app           = require("core.app")
local buffer        = require("core.buffer")
local config        = require("core.config")
local timer         = require("core.timer")
local bus           = require("lib.hardware.bus")
local pci           = require("lib.hardware.pci")
local basic_apps    = require("apps.basic.basic_apps")
local SolarFlareNic = require("apps.solarflare.solarflare").SolarFlareNic;
local PcapReader    = require("apps.pcap.pcap").PcapReader
local main          = require("core.main")

local ffi = require("ffi")
local C = ffi.C

function run (args)
   local filename = table.remove(args, 1)
   local patterns = args
   local c = config.new()
   config.app(c, "pcap", PcapReader, filename)
   config.app(c, "loop", basic_apps.Repeater)
   config.app(c, "tee", basic_apps.Tee)
   config.app(c, "sink", basic_apps.Sink)
   config.link(c, "pcap.output -> loop.input")
   config.link(c, "loop.output -> tee.input")
   local nics = 0
   bus.scan_devices()
   for _,device in ipairs(bus.devices) do
      if is_device_suitable(device, patterns) then
         nics = nics + 1
         local name = "nic"..nics
         config.app(c, name, SolarFlareNic, {ifname=device.interface})
         config.link(c, "tee."..tostring(nics).."->"..name..".input")
         config.link(c, name..".output -> sink.input")
      end
   end
   app.configure(c)
   timer.init()
   local fn = function ()
                 print("Transmissions (last 1 sec):")
                 app.report_each_app()
              end
   local t = timer.new("report", fn, 1e9, 'repeating')
   timer.activate(t)
   buffer.preallocate(100000)
   app.main()
end

function is_device_suitable (pcidev, patterns)
   if not pcidev.usable or pcidev.driver ~= 'apps.solarflare.solarflare' then
      return false
   end
   if #patterns == 0 then
      return true
   end
   for _, pattern in ipairs(patterns) do
      if pcidev.pciaddress:gmatch(pattern)() then
         return true
      end
   end
end

run(main.parameters)


